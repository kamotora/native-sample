package ru.kamotora.graal.impl;

import com.oracle.svm.core.jni.headers.JNIEnvironment;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.RandomUtils;
import org.graalvm.nativeimage.IsolateThread;
import org.graalvm.nativeimage.UnmanagedMemory;
import org.graalvm.nativeimage.c.function.CEntryPoint;
import org.graalvm.nativeimage.c.struct.SizeOf;
import org.graalvm.nativeimage.c.type.CCharPointer;
import org.graalvm.nativeimage.c.type.CIntPointer;
import org.graalvm.nativeimage.c.type.CTypeConversion;
import org.graalvm.word.Pointer;
import org.graalvm.word.PointerBase;
import org.graalvm.word.WordFactory;

@SuppressWarnings("unused")
@Slf4j
public class NativeImpl {


    private static final int SUCCESS_CODE = 0;

    @CEntryPoint(name = "Java_ru_kamotora_graal_api_NativeApi_test")
    public static void test(Pointer jniEnv, Pointer clazz,
                            @CEntryPoint.IsolateThreadContext long isolateId,
                            CCharPointer pEmail) {
        //Convert C *char to Java String
        String email = CTypeConversion.toJavaString(pEmail);
        log.info("Email: {}", email);
        logArray(email.getBytes());
    }

    private static void logArray(byte[] bytes) {
        for (int i = 0; i < bytes.length; i++) {
            log.info("Byte[{}]: {}", i, (int) bytes[i]);
        }
    }

    @CEntryPoint(name = "Java_ru_kamotora_graal_api_NativeApi_testBytes")
    public static CCharPointer testBytes(Pointer jniEnv, Pointer clazz,
                                         @CEntryPoint.IsolateThreadContext long isolateId,
                                         CCharPointer pBytes, int size) {
        var bytesBuffer = CTypeConversion.asByteBuffer(pBytes, size);
        var bytes = new byte[size];
        bytesBuffer.get(bytes);
        logArray(bytes);
        log.info("Reversed");
        ArrayUtils.reverse(bytes);
        logArray(bytes);
        try (var bufferHandler = CTypeConversion.toCBytes(bytes)) {
            return bufferHandler.get();
        }
    }

    @CEntryPoint(name = "Java_ru_kamotora_graal_api_NativeApi_randomByteArray")
    public static CCharPointer randomByteArray(Pointer jniEnv, Pointer clazz,
                                               @CEntryPoint.IsolateThreadContext long isolateId,
                                               CIntPointer resultSizePointer) {
        var resultSize = RandomUtils.nextInt(1, 5);
        var bytes = RandomUtils.nextBytes(resultSize);
        log.info("Generated bytes");
        logArray(bytes);
        try (var bufferHandler = CTypeConversion.toCBytes(bytes)) {
            resultSizePointer.write(resultSize);
            return bufferHandler.get();
        }
    }


    @CEntryPoint(name = "Java_ru_kamotora_graal_api_NativeApi_createPoint")
    public static PointerBase createPoint(Pointer jniEnv, Pointer clazz,
                                          @CEntryPoint.IsolateThreadContext long isolateId,
                                          int x, int y) {
        NativePoint nativePoint = UnmanagedMemory.malloc(SizeOf.get(NativePoint.class));
        nativePoint.setX(x);
        nativePoint.setY(y);
        log.info("Point created with x: {}, y: {}", x, y);
        return nativePoint;
    }

    @CEntryPoint(name = "Java_ru_kamotora_graal_api_NativeApi_getErrorText")
    public static PointerBase getErrorText(JNIEnvironment jniEnv, Pointer clazz,
                                           @CEntryPoint.IsolateThreadContext long isolateId,
                                           boolean needError) {
        try {
            var result = someErrorMethod(needError);
            NativeResponse response = UnmanagedMemory.calloc(SizeOf.get(NativeResponse.class));
            log.debug("Size of response: {}, address: {}", SizeOf.get(NativeResponse.class), response.rawValue());
            response.setCode(SUCCESS_CODE);
//            try () {
            var holder = CTypeConversion.toCString(result);
            response.setResult(holder.get());
            response.setErrorMessage(WordFactory.nullPointer());
            log.debug("Response created. Code: {}, result: {}, errorMessage: {}", response.getCode(),
                    CTypeConversion.toJavaString(response.getResult()),
                    CTypeConversion.toJavaString(response.getErrorMessage()));
            return response;
//            }
        } catch (NativeLibException e) {
            NativeResponse response = UnmanagedMemory.malloc(SizeOf.get(NativeResponse.class));
            log.debug("Size of response: {}, address: {}", SizeOf.get(NativeResponse.class), response.rawValue());
            response.setResult(WordFactory.nullPointer());
            response.setCode(e.getErrorCode());
            if (e.getLocalizedMessage() != null) {
                try (var holder = CTypeConversion.toCString(e.getLocalizedMessage())) {
                    response.setErrorMessage(holder.get());
                }
            }
            log.debug("Response created. Code: {}, result: {}, errorMessage: {}", response.getCode(),
                    CTypeConversion.toJavaString(response.getResult()),
                    CTypeConversion.toJavaString(response.getErrorMessage()));
            return response;
        }
    }

    private static String someErrorMethod(boolean needError) {
        if (needError) {
            throw new NativeLibException();
        } else {
            return "Success !!!";
        }
    }

    @CEntryPoint(name = "Java_ru_kamotora_graal_api_NativeApi_add")
    public static void add(Pointer jniEnv, Pointer clazz,
                           @CEntryPoint.IsolateThreadContext long isolateId,
                           int a, int b) {
        System.out.println(a + b);
        log.info("Add result: {}", a + b);
    }

    @CEntryPoint(name = "Java_ru_kamotora_graal_api_NativeApi_createIsolate",
                 builtin = CEntryPoint.Builtin.CREATE_ISOLATE)
    public static native IsolateThread createIsolate();
}
